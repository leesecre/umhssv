{"version":3,"file":"lock.component.base.js","sourceRoot":"","sources":["../../src/lock.component.base.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from \"rxjs/Observable\";\r\nimport { Subscription } from \"rxjs/Subscription\";\r\nimport { LockManagerService } from \"./lock-manager.service\";\r\nimport { UtilService } from \"./util.service\";\r\nimport { RootServiceLocator } from \"./root.injector.const\";\r\n\r\nexport class NgLockComponentBase {\r\n    public util: UtilService = null;\r\n    public isLocked$: Observable<boolean> = null;\r\n    public isLocked: boolean = false;\r\n    public lockManager: LockManagerService = null;\r\n\r\n    private _componentId: string = \"\";\r\n    private _lockSubscription: Subscription = null;\r\n    private _subscriptions: Subscription[] = [];\r\n\r\n    constructor() {\r\n        this.util = RootServiceLocator.injector.get(UtilService);\r\n        this.lockManager = RootServiceLocator.injector.get(LockManagerService);\r\n        this.setComponentId(this.util.getId());\r\n        this.setNgOnDestroyHook();\r\n    }\r\n\r\n    setComponentId(componentId: string) {\r\n        this._componentId = componentId;\r\n        this.isLocked$ = this.lockManager.listenTo(this._componentId).debounceTime(0);\r\n\r\n        if (this._lockSubscription) {\r\n            this.unWrapLockSubscription();\r\n        }\r\n    }\r\n\r\n    unWrapLockSubscription() {\r\n        if (this._lockSubscription) {\r\n            this.lockManager.unListen(this._lockSubscription);\r\n        }\r\n\r\n        if (!this.isLocked$ || !this.isLocked$.subscribe) {\r\n            return;\r\n        }\r\n\r\n        this._lockSubscription = this.isLocked$.subscribe(isLocked => this.isLocked = isLocked);\r\n    }\r\n\r\n    busyManager(value: boolean = true) {\r\n        this.busy(value, value);\r\n    }\r\n\r\n    busy(value: boolean = true, managerBusy: boolean = false) {\r\n        value\r\n            ? this.lockManager.lockComponent(this._componentId, managerBusy)\r\n            : this.lockManager.unlockComponent(this._componentId);\r\n    }\r\n\r\n    addSubscription(s: Subscription) {\r\n        this._subscriptions.push(s);\r\n    }\r\n\r\n    cleanupData() {\r\n        this.lockManager.unListen(this._lockSubscription);\r\n        this.lockManager.removeComponent(this._componentId);\r\n        this.lockManager.unListen(this._subscriptions);\r\n    }\r\n\r\n    private setNgOnDestroyHook() {\r\n        let old = () => {\r\n        };\r\n        if (this.util.isFunction(this[\"ngOnDestroy\"])) {\r\n            old = this[\"ngOnDestroy\"].bind(this);\r\n        }\r\n\r\n        this[\"ngOnDestroy\"] = () => {\r\n            old();\r\n            this.cleanupData();\r\n        }\r\n    }\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}